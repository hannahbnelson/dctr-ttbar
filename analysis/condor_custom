#! /usr/bin/env python

import argparse
import sys
import os
import subprocess
import shutil

def parse_arguments():
    parser = argparse.ArgumentParser(description='Generate a Condor submit file for Work Queue workers')
    
    parser.add_argument('--manager', dest='manager_name', required=True,
                        help='Name of the Work Queue manager to connect to')
    
    parser.add_argument('--cores', dest='cores', type=int, default=1,
                        help='Number of cores per worker (default: 1)')
    
    parser.add_argument('--memory', dest='memory', type=int, default=2048,
                        help='Memory per worker in MB (default: 2048)')
    
    parser.add_argument('--disk', dest='disk', type=int, default=4096,
                        help='Disk space per worker in MB (default: 4096)')
    
    parser.add_argument('--timeout', dest='timeout', type=int, default=900,
                        help='Worker timeout in seconds (default: 900)')
    
    parser.add_argument('--num-workers', dest='num_workers', type=int, default=1,
                        help='Number of workers to submit (default: 1)')
    
    parser.add_argument('--worker-options', dest='worker_options', default='',
                        help='Additional options to pass to the worker')
    
    parser.add_argument('--scratch-dir', dest='scratch_dir', default='/tmp/' + os.environ.get('USER', 'unknown') + '-workers',
                        help='Scratch directory for workers (default: /tmp/$USER-workers)')
    
    return parser.parse_args()

args = parse_arguments()

# Extract arguments for use in the submit file
manager_name = args.manager_name
cores = args.cores
memory = args.memory
disk = args.disk
timeout = args.timeout
num_workers = args.num_workers
worker_options = args.worker_options
scratch_dir = args.scratch_dir

# Create scratch directory if it doesn't exist
if not os.path.exists(scratch_dir):
    try:
        os.makedirs(scratch_dir, exist_ok=True)
        print(f"Created scratch directory: {scratch_dir}")
    except OSError as e:
        print(f"Error creating scratch directory {scratch_dir}: {e}", file=sys.stderr)
        sys.exit(1)

# Prepare the submit file content
submit_file_content = f"""
universe = vanilla
executable = with_oasis_certs
arguments = ./work_queue_worker --cores $$([TARGET.Cpus]) --memory $$([TARGET.Memory]) --disk $$([TARGET.Disk/1024]) -t {timeout} --cores {cores} --memory {memory} --disk {disk} -M {manager_name} {worker_options}
transfer_input_files = work_queue_worker, with_oasis_certs
should_transfer_files = yes
when_to_transfer_output = on_exit
output = worker.$(PROCESS).output
error = worker.$(PROCESS).error
log = workers.log
+JobMaxSuspendTime = 0

# Some programs assume some variables are set, like HOME, so we export the
# environment variables with the job.  Comment the next line if you do not want
# the environment exported.
getenv = true
request_cpus = {cores}
request_memory = {memory}
request_disk = {disk*1024}
queue {num_workers}
"""


with_oasis_certs="""#!/bin/bash

trap cleanup EXIT

cleanup() {
    if [[ -n "${CUSTOM_CERT_LOCATION}" ]]
    then
        rm -rf "${CUSTOM_CERT_LOCATION}"
    fi
}

export OASIS_CERTIFICATES=${OASIS_CERTIFICATES:-/cvmfs/oasis.opensciencegrid.org/mis/certificates}

if [[ -e "${OASIS_CERTIFICATES}" ]]
then
    echo "Using /cvmfs certificates."
    source /cvmfs/oasis.opensciencegrid.org/osg-software/osg-wn-client/current/el9-x86_64/setup.sh
    unset PYTHONPATH
else
    CUSTOM_CERT_LOCATION=$(mktemp -d -p "$(pwd)" certificates.XXXXXX)
    mkdir -p ${CUSTOM_CERT_LOCATION}

    export X509_CERT_DIR="$CUSTOM_CERT_LOCATION"

    cat > ${X509_CERT_DIR}/1e49ade3.0 <<EOF
-----BEGIN CERTIFICATE-----
MIIGXTCCBEWgAwIBAgIQSN5GfzRaAZziIwBIT7dO5TANBgkqhkiG9w0BAQwFADCB
iDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCk5ldyBKZXJzZXkxFDASBgNVBAcTC0pl
cnNleSBDaXR5MR4wHAYDVQQKExVUaGUgVVNFUlRSVVNUIE5ldHdvcmsxLjAsBgNV
BAMTJVVTRVJUcnVzdCBSU0EgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMjMw
NTIwMDAwMDAwWhcNMzMwNTE5MjM1OTU5WjBJMQswCQYDVQQGEwJVUzESMBAGA1UE
ChMJSW50ZXJuZXQyMSYwJAYDVQQDEx1JbkNvbW1vbiBSU0EgSUdURiBTZXJ2ZXIg
Q0EgMzCCAaIwDQYJKoZIhvcNAQEBBQADggGPADCCAYoCggGBAK2Wcv7dcIpOm0zW
IOFmZXDjs74KzzK4GhaSjHhuiO1UrVXaeSJWcEn+mdy4VcLvCt7fqWlb0Dbu+OBV
drI8Rw9SRgYrk6VKA9AAoULqzzju4maAlNnicxbanVYg9wi+WFIaGsgZt7xA1phL
fjRcQfbujz6qtwMqS8+vBcOqBGCcknSrDZDqrbojSDwTNJfWYJBCgaBf1oJNLtmI
98qZLMTn5s6/SEenvC4nEfRRJcqottUwzsq9PZBs9mwWR3PW9gHtPmAK7yXDZ0kQ
iHm0td9CK8z6IKX23aVVC3a54shtybPIirU6ZQnh+uj6yYCkepTlw3dcyZSqPG6d
1OJvhhRB2h1jfoVAlJ+9GJr6TqK9peP61BgH0JRUjUIyj2dR3mcBalxEKvCiGeLT
b4RdOZN9ahwykGCIDNchhPSXtZgtPrA35mzZwtfEyTh3fL4OtIRsqNPCAOdZsJ+C
jph1iIwHApYvPf9G1x/yeVV/Jyk0hZecLpubor4it3AzBmWadQIDAQABo4IBfzCC
AXswHwYDVR0jBBgwFoAUU3m/WqorSs9UgOHYm8Cd8rIDZsswHQYDVR0OBBYEFBY2
peMxe79n9rK35+pU71cwvsflMA4GA1UdDwEB/wQEAwIBhjASBgNVHRMBAf8ECDAG
AQH/AgEAMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAxBgNVHSAEKjAo
MA4GDCsGAQQBriMBBAMEAjAMBgoqhkiG90wFAgIBMAgGBmeBDAECAjBQBgNVHR8E
STBHMEWgQ6BBhj9odHRwOi8vY3JsLnVzZXJ0cnVzdC5jb20vVVNFUlRydXN0UlNB
Q2VydGlmaWNhdGlvbkF1dGhvcml0eS5jcmwwcQYIKwYBBQUHAQEEZTBjMDoGCCsG
AQUFBzAChi5odHRwOi8vY3J0LnVzZXJ0cnVzdC5jb20vVVNFUlRydXN0UlNBQUFB
Q0EuY3J0MCUGCCsGAQUFBzABhhlodHRwOi8vb2NzcC51c2VydHJ1c3QuY29tMA0G
CSqGSIb3DQEBDAUAA4ICAQBWO9yThret5cssTu2BGe1kyG8RM62C8q3QpGp4/Frn
mOoL46Rl6nzsmPEKQmaqHDiaNi2vZIb6bRLo/cX9/cJ8TXWY8yZO1JyGsK4jU6NE
tT67gUKritKlKPyGa4U5xMeqBPoBzTpQ6LdLNTsZgwYqWWi2fOh8weWxR2AmN+/F
qBrqOl+7tIJKhTzNvpZZMViXN7SQfzdLkckpwbZYq1kHly6uQuV303DrKvk7EF1t
zHzNQ0Wv6DkuRfOLZi31Xj43w4DpV0jiN+v06lNuspq1qq4TeDp72yUyQL7veqU8
W9DOfZF1fmblNxEg1kVBGRMKZAr5IrqCGyVCM/Ad6Yo6bvJ2P0PLGZ4Ww57ZiVyj
VCf0jCO2iGavyp1TGzxQpCXaps2+zFyAAOkVcBR0ZdNDoiu07wXZ7KGrIeGdTJPN
cAdpPx5w4Zmi07Mg+TChy1iHiRwoXStVUg2vqwFOPFJp/ihfs81K9VAv5CEhdvXJ
kxMhU5bq6TXQMOMwZ3JM8/sVm2rdTaNGYbwt1nT/alKKC+gwc+hlQkDfg2MWiU9I
eVl//WhqBcCKdteq2zJxW32LfszpyYoSPQTnqetPU+IKxFSHfc3i580MNfE6wpfe
6hzz08jjXWo6VQ+RGfEEWm5mqv6YYfKynNV5FaGLFuyZSqLCD6LSfQjQvN5jrRHi
PQ==
-----END CERTIFICATE-----
EOF

    cat > ${X509_CERT_DIR}/1e49ade3.r0 <<EOF
-----BEGIN X509 CRL-----
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
ecrtfCdxcIgqbBV6W5oGwNM=
-----END X509 CRL-----
EOF

    cat > ${X509_CERT_DIR}/fc5a8f99.0 <<EOF
-----BEGIN CERTIFICATE-----
MIIF3jCCA8agAwIBAgIQAf1tMPyjylGoG7xkDjUDLTANBgkqhkiG9w0BAQwFADCB
iDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCk5ldyBKZXJzZXkxFDASBgNVBAcTC0pl
cnNleSBDaXR5MR4wHAYDVQQKExVUaGUgVVNFUlRSVVNUIE5ldHdvcmsxLjAsBgNV
BAMTJVVTRVJUcnVzdCBSU0EgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMTAw
MjAxMDAwMDAwWhcNMzgwMTE4MjM1OTU5WjCBiDELMAkGA1UEBhMCVVMxEzARBgNV
BAgTCk5ldyBKZXJzZXkxFDASBgNVBAcTC0plcnNleSBDaXR5MR4wHAYDVQQKExVU
aGUgVVNFUlRSVVNUIE5ldHdvcmsxLjAsBgNVBAMTJVVTRVJUcnVzdCBSU0EgQ2Vy
dGlmaWNhdGlvbiBBdXRob3JpdHkwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIK
AoICAQCAEmUXNg7D2wiz0KxXDXbtzSfTTK1Qg2HiqiBNCS1kCdzOiZ/MPans9s/B
3PHTsdZ7NygRK0faOca8Ohm0X6a9fZ2jY0K2dvKpOyuR+OJv0OwWIJAJPuLodMkY
tJHUYmTbf6MG8YgYapAiPLz+E/CHFHv25B+O1ORRxhFnRghRy4YUVD+8M/5+bJz/
Fp0YvVGONaanZshyZ9shZrHUm3gDwFA66Mzw3LyeTP6vBZY1H1dat//O+T23LLb2
VN3I5xI6Ta5MirdcmrS3ID3KfyI0rn47aGYBROcBTkZTmzNg95S+UzeQc0PzMsNT
79uq/nROacdrjGCT3sTHDN/hMq7MkztReJVni+49Vv4M0GkPGw/zJSZrM233bkf6
c0Plfg6lZrEpfDKEY1WJxA3Bk1QwGROs0303p+tdOmw1XNtB1xLaqUkL39iAigmT
Yo61Zs8liM2EuLE/pDkP2QKe6xJMlXzzawWpXhaDzLhn4ugTncxbgtNMs+1b/97l
c6wjOy0AvzVVdAlJ2ElYGn+SNuZRkg7zJn0cTRe8yexDJtC/QV9AqURE9JnnV4ee
UB9XVKg+/XRjL7FQZQnmWEIuQxpMtPAlR1n6BB6T1CZGSlCBst6+eLf8ZxXhyVeE
Hg9j1uliutZfVS7qXMYoCAQlObgOK6nyTJccBz8NUvXt7y+CDwIDAQABo0IwQDAd
BgNVHQ4EFgQUU3m/WqorSs9UgOHYm8Cd8rIDZsswDgYDVR0PAQH/BAQDAgEGMA8G
A1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEMBQADggIBAFzUfA3P9wF9QZllDHPF
Up/L+M+ZBn8b2kMVn54CVVeWFPFSPCeHlCjtHzoBN6J2/FNQwISbxmtOuowhT6KO
VWKR82kV2LyI48SqC/3vqOlLVSoGIG1VeCkZ7l8wXEskEVX/JJpuXior7gtNn3/3
ATiUFJVDBwn7YKnuHKsSjKCaXqeYalltiz8I+8jRRa8YFWSQEg9zKC7F4iRO/Fjs
8PRF/iKz6y+O0tlFYQXBl2+odnKPi4w2r78NBc5xjeambx9spnFixdjQg3IM8WcR
iQycE0xyNN+81XHfqnHd4blsjDwSXWXavVcStkNr/+XeTWYRUc+ZruwXtuhxkYze
Sf7dNXGiFSeUHM9h4ya7b6NnJSFd5t0dCy5oGzuCr+yDZ4XUmFF0sbmZgIn/f3gZ
XHlKYC6SQK5MNyosycdiyA5d9zZbyuAlJQG03RoHnHcAP9Dc1ew91Pq7P8yF1m9/
qS3fuQL39ZeatTXaw2ewh0qpKJ4jjv9cJ2vhsE/zB+4ALtRZh8tSQZXq9EfX7mRB
VXyNWQKV3WKdwrnuWih0hKWbt5DHDAff9Yk2dDLWKMGwsAvgnEzDHNb842m1R0aB
L6KCq9NjRHDEjf8tM7qtj3u1cIiuPhnPQCjY/MiQu12ZIvVS5ljFH4gxQ+6IHdfG
jjxDah2nGN59PRbxYvnKkKj9
-----END CERTIFICATE-----
EOF

    cat > ${X509_CERT_DIR}/fc5a8f99.r0 <<EOF
-----BEGIN X509 CRL-----
MIIE9zCCAt8CAQEwDQYJKoZIhvcNAQEMBQAwgYgxCzAJBgNVBAYTAlVTMRMwEQYD
VQQIEwpOZXcgSmVyc2V5MRQwEgYDVQQHEwtKZXJzZXkgQ2l0eTEeMBwGA1UEChMV
VGhlIFVTRVJUUlVTVCBOZXR3b3JrMS4wLAYDVQQDEyVVU0VSVHJ1c3QgUlNBIENl
cnRpZmljYXRpb24gQXV0aG9yaXR5Fw0yNDAxMjMxNjI0NDRaFw0yNDAxMzAxNjI0
NDRaMIIB7jAwAhEAptwu04gwzAM9I6vOtyVkvxcNMTgwMzE2MTIyMTU0WjAMMAoG
A1UdFQQDCgEFMC8CEDKRuXY3W3CKCOUyJCe7xDQXDTE4MDMxNjEyMjE1NFowDDAK
BgNVHRUEAwoBBTAwAhEA2MhXyuS+ZvkTdZ/do9XbKxcNMTgwMzE2MTIyMTU0WjAM
MAoGA1UdFQQDCgEFMC8CECMsoKUhJQFGUUkjHrgAz00XDTIzMDgwMTAwMDAwMFow
DDAKBgNVHRUEAwoBBTAwAhEAkG4TzfjhKsdVkRWpWJw9zRcNMjMwODAxMDAwMDAw
WjAMMAoGA1UdFQQDCgEFMC8CEFgBPZoRGKAmAITIlQM0n9sXDTIzMDgwMTAwMDAw
MFowDDAKBgNVHRUEAwoBBTAwAhEAtyniU0LwlCsnPvTvxOGw2hcNMjMwODAxMDAw
MDAwWjAMMAoGA1UdFQQDCgEFMC8CEAcNS/3MxXdBk5eL9m8VKqsXDTIzMDgwMTAw
MDAwMFowDDAKBgNVHRUEAwoBBTAvAhB5d7re9oNUhLjOsN0rWPQIFw0yMzA4MDEw
MDAwMDBaMAwwCgYDVR0VBAMKAQUwLwIQVGFdl5j7DGyBksFR1YNATBcNMjMxMDI0
MjEzMjU5WjAMMAoGA1UdFQQDCgEFoDAwLjAfBgNVHSMEGDAWgBRTeb9aqitKz1SA
4dibwJ3ysgNmyzALBgNVHRQEBAICFNowDQYJKoZIhvcNAQEMBQADggIBAFU2CWkm
HUC0IGHtle3i0PH+Rf6bUbCGmUnbyE3lS1EYqO/iUNMyme0RpYisXyiqXIZuuJsD
++SiY4R+zbizrCNleMIhMJwPxE0xk2z0IVF7Z0ore7Oe1Jx1zmHc/DDUFXWM0nTs
sepQ0qLX2+vEUNdvdUfs6sw1bXQN+3KcnsvSfKIanvR3jEwj2WvPJJFZVKM9qdHd
nuCxytIqokFxkj3AoumXhqThppCauPJbWOCz3S9VEWm0E8UR1tfpbtbdoY9RG6At
c9ETagBeYZucVCXoXr+f0eTrUebbZ3gpXVju/L1fVMV6DwOAak3dzhugClEXweqF
3xPJ6XST8fPWxUf2GI8iehFYjODn4cF6H6ClG3IboWOepEGj3JgzQA6Fdr15LT+g
G1G1CLBv7j8rGeRUlgC4Yv5Z19xDz/nplmaLsjxE3MP51evUFuyFaEMbjHAmMB29
78o/4cddWnYUNzl2DO+cJLVcvsYEwGXlS2gZxDR/A3Emn36XbaUAIT5hIioEQnf8
Hg0/Fk9pK1809MVLfiBrk32+imw1RaElg+FcvLn1p8BWDueRJ0wnRH0C/58yY9Rb
N1SrD9qymesdV2GYsATyAOTVhcXpOZhhkTE/PuJjPG9xxmNA6zFgGx9uR7Kz04pr
jWPLhx0X/WbsaMBDhcBXVQfI2kh52YitBZET
-----END X509 CRL-----
EOF

    cat > ${X509_CERT_DIR}/InCommon-RSA-IGTF-Server-CA-3.pem <<EOF
-----BEGIN CERTIFICATE-----
MIIGXTCCBEWgAwIBAgIQSN5GfzRaAZziIwBIT7dO5TANBgkqhkiG9w0BAQwFADCB
iDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCk5ldyBKZXJzZXkxFDASBgNVBAcTC0pl
cnNleSBDaXR5MR4wHAYDVQQKExVUaGUgVVNFUlRSVVNUIE5ldHdvcmsxLjAsBgNV
BAMTJVVTRVJUcnVzdCBSU0EgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMjMw
NTIwMDAwMDAwWhcNMzMwNTE5MjM1OTU5WjBJMQswCQYDVQQGEwJVUzESMBAGA1UE
ChMJSW50ZXJuZXQyMSYwJAYDVQQDEx1JbkNvbW1vbiBSU0EgSUdURiBTZXJ2ZXIg
Q0EgMzCCAaIwDQYJKoZIhvcNAQEBBQADggGPADCCAYoCggGBAK2Wcv7dcIpOm0zW
IOFmZXDjs74KzzK4GhaSjHhuiO1UrVXaeSJWcEn+mdy4VcLvCt7fqWlb0Dbu+OBV
drI8Rw9SRgYrk6VKA9AAoULqzzju4maAlNnicxbanVYg9wi+WFIaGsgZt7xA1phL
fjRcQfbujz6qtwMqS8+vBcOqBGCcknSrDZDqrbojSDwTNJfWYJBCgaBf1oJNLtmI
98qZLMTn5s6/SEenvC4nEfRRJcqottUwzsq9PZBs9mwWR3PW9gHtPmAK7yXDZ0kQ
iHm0td9CK8z6IKX23aVVC3a54shtybPIirU6ZQnh+uj6yYCkepTlw3dcyZSqPG6d
1OJvhhRB2h1jfoVAlJ+9GJr6TqK9peP61BgH0JRUjUIyj2dR3mcBalxEKvCiGeLT
b4RdOZN9ahwykGCIDNchhPSXtZgtPrA35mzZwtfEyTh3fL4OtIRsqNPCAOdZsJ+C
jph1iIwHApYvPf9G1x/yeVV/Jyk0hZecLpubor4it3AzBmWadQIDAQABo4IBfzCC
AXswHwYDVR0jBBgwFoAUU3m/WqorSs9UgOHYm8Cd8rIDZsswHQYDVR0OBBYEFBY2
peMxe79n9rK35+pU71cwvsflMA4GA1UdDwEB/wQEAwIBhjASBgNVHRMBAf8ECDAG
AQH/AgEAMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAxBgNVHSAEKjAo
MA4GDCsGAQQBriMBBAMEAjAMBgoqhkiG90wFAgIBMAgGBmeBDAECAjBQBgNVHR8E
STBHMEWgQ6BBhj9odHRwOi8vY3JsLnVzZXJ0cnVzdC5jb20vVVNFUlRydXN0UlNB
Q2VydGlmaWNhdGlvbkF1dGhvcml0eS5jcmwwcQYIKwYBBQUHAQEEZTBjMDoGCCsG
AQUFBzAChi5odHRwOi8vY3J0LnVzZXJ0cnVzdC5jb20vVVNFUlRydXN0UlNBQUFB
Q0EuY3J0MCUGCCsGAQUFBzABhhlodHRwOi8vb2NzcC51c2VydHJ1c3QuY29tMA0G
CSqGSIb3DQEBDAUAA4ICAQBWO9yThret5cssTu2BGe1kyG8RM62C8q3QpGp4/Frn
mOoL46Rl6nzsmPEKQmaqHDiaNi2vZIb6bRLo/cX9/cJ8TXWY8yZO1JyGsK4jU6NE
tT67gUKritKlKPyGa4U5xMeqBPoBzTpQ6LdLNTsZgwYqWWi2fOh8weWxR2AmN+/F
qBrqOl+7tIJKhTzNvpZZMViXN7SQfzdLkckpwbZYq1kHly6uQuV303DrKvk7EF1t
zHzNQ0Wv6DkuRfOLZi31Xj43w4DpV0jiN+v06lNuspq1qq4TeDp72yUyQL7veqU8
W9DOfZF1fmblNxEg1kVBGRMKZAr5IrqCGyVCM/Ad6Yo6bvJ2P0PLGZ4Ww57ZiVyj
VCf0jCO2iGavyp1TGzxQpCXaps2+zFyAAOkVcBR0ZdNDoiu07wXZ7KGrIeGdTJPN
cAdpPx5w4Zmi07Mg+TChy1iHiRwoXStVUg2vqwFOPFJp/ihfs81K9VAv5CEhdvXJ
kxMhU5bq6TXQMOMwZ3JM8/sVm2rdTaNGYbwt1nT/alKKC+gwc+hlQkDfg2MWiU9I
eVl//WhqBcCKdteq2zJxW32LfszpyYoSPQTnqetPU+IKxFSHfc3i580MNfE6wpfe
6hzz08jjXWo6VQ+RGfEEWm5mqv6YYfKynNV5FaGLFuyZSqLCD6LSfQjQvN5jrRHi
PQ==
-----END CERTIFICATE-----
EOF

    chmod 640 ${CUSTOM_CERT_LOCATION}/???*
fi

#export XRD_LOGLEVEL=Debug
#export XRD_LOGLEVEL=Info
#export HADOOP_ROOT_LOGGER=DEBUG,console

if [[ -f proxy.pem ]]
then
    export X509_USER_PROXY=$(realpath proxy.pem)
fi

#
export MYHOST=$(hostname -f)

# "${@}" --contact-hostport $MYHOST 2>&1
"${@}" 2>&1
status=$?

echo exit status from certs wrapper: $status


exit $status
"""
# Create the condor.submit file in the scratch directory
with open(os.path.join(scratch_dir, 'condor.submit'), 'w') as f:
    f.write(submit_file_content)

with open(os.path.join(scratch_dir, 'with_oasis_certs'), 'w') as f:
    f.write(with_oasis_certs)

# Make with_oasis_certs executable
os.chmod(os.path.join(scratch_dir, 'with_oasis_certs'), 0o755)

# Find and copy the work_queue_worker executable to the scratch directory

try:
    # Use 'which' command to find the path to work_queue_worker
    result = subprocess.run(['which', 'work_queue_worker'], 
                           stdout=subprocess.PIPE, 
                           stderr=subprocess.PIPE, 
                           text=True, 
                           check=True)
    
    worker_path = result.stdout.strip()
    
    if worker_path:
        # Copy the executable to the scratch directory
        shutil.copy2(worker_path, os.path.join(scratch_dir, 'work_queue_worker'))
        print(f"Copied work_queue_worker from {worker_path} to {scratch_dir}")
    else:
        print("work_queue_worker not found in PATH", file=sys.stderr)
        sys.exit(1)
except subprocess.CalledProcessError as e:
    print(f"Error finding work_queue_worker: {e}", file=sys.stderr)
    sys.exit(1)
except Exception as e:
    print(f"Error copying work_queue_worker: {e}", file=sys.stderr)
    sys.exit(1)


# Execute condor_submit with the submission file
try:
    submit_file = os.path.join(scratch_dir, 'condor.submit')
    print(f"Submitting jobs with: condor_submit {submit_file}")
    
    result = subprocess.run(['condor_submit', submit_file],
                           stdout=subprocess.PIPE,
                           stderr=subprocess.PIPE,
                           text=True,
                           cwd=scratch_dir)
    
    # Print the output from condor_submit
    print(result.stdout)
    
    if result.returncode != 0:
        print(f"Error during submission: {result.stderr}", file=sys.stderr)
        sys.exit(result.returncode)
    
    print(f"Successfully submitted {num_workers} worker(s) to HTCondor")
except Exception as e:
    print(f"Error submitting jobs: {e}", file=sys.stderr)
    sys.exit(1)

